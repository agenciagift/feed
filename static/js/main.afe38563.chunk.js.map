{"version":3,"sources":["constants/appConfig.js","constants/sizes.js","components/form.js","components/Search/index.js","constants/colors.js","components/layout.js","components/Header/styled.js","components/Header/index.js","components/LinkItem/styled.js","components/LinkItem/index.js","app/storeConstants.js","app/slices/links.js","components/LinkList/styled.js","components/LinkList/index.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["logo","src","alt","width","height","spacing","xs","s","m","l","xl","getSpacing","key","contentWidth","default","BaseInput","styled","input","BaseButton","button","Search","useState","text","setText","onSubmit","e","preventDefault","console","log","type","value","onChange","target","Wrapper","div","getContentWidth","HeaderContainer","header","HeaderWrapper","Header","LinkItemWrapper","li","LinkItem","link","href","url","rel","id","sliceState","initialState","status","linksSlice","createSlice","name","reducers","fetchStart","state","fetchEnd","set","action","payload","add","remove","filter","actions","selectLinks","links","LinkListWrapper","ul","LinkList","useSelector","map","App","store","configureStore","reducer","linksReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.afe38563.chunk.js","sourcesContent":["export const logo = {\n    src: 'https://agenciagift.github.io/favicon.png',\n    alt: 'AgÃªncia Gift',\n    width: 49.25,\n    height: 50,\n};\n","export const spacing = {\n    xs: 4,\n    s: 8,\n    m: 16,\n    l: 32,\n    xl: 64,\n};\n\nexport const getSpacing = (key = 'm') => `${spacing[key] || spacing.m}px`;\n\nexport const contentWidth = {\n    default: 800,\n};\n\nexport const getContentWidth = (key = 'default') => `${contentWidth[key] || contentWidth.default}px`;\n","import styled from \"styled-components\";\nimport { getSpacing } from \"../constants/sizes\";\n\nexport const BaseInput = styled.input`\n    padding: ${getSpacing('s')};\n`;\n\nexport const BaseButton = styled.button`\n    padding: ${getSpacing('s')};\n`;","import React, { useState } from 'react'\nimport { BaseButton, BaseInput } from '../form';\n\nexport default function Search() {\n    const [text, setText] = useState('');\n\n    const submitForm = (e) => {\n        e.preventDefault();\n\n        console.log(text);\n\n        setText('');\n    };\n\n    return (\n        <form onSubmit={submitForm}>\n            <BaseInput type=\"text\" value={text} onChange={(e) => setText(e.target.value)} />\n            <BaseButton>Pesquisar</BaseButton>\n        </form>\n    )\n}\n","export const grey = {\n    light: '#e7e7e7',\n    mid: '#999',\n    dark: '#666',\n};\n","import styled from \"styled-components\";\nimport { getContentWidth } from \"../constants/sizes\";\n\nexport const Wrapper = styled.div`\n    max-width: ${getContentWidth()};\n    margin: auto;\n`;","import styled from \"styled-components\";\nimport { grey } from \"../../constants/colors\";\nimport { getSpacing } from \"../../constants/sizes\";\nimport { Wrapper } from \"../layout\";\n\nexport const HeaderContainer = styled.header`\n    padding: ${getSpacing('s')};\n    background-color: ${grey.light};\n`;\n\nexport const HeaderWrapper = styled(Wrapper)`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`;\n","import React from 'react';\nimport { logo } from '../../constants/appConfig';\nimport Search from '../Search';\nimport { HeaderContainer, HeaderWrapper } from './styled';\n\nexport default function Header() {\n    return (\n        <HeaderContainer>\n            <HeaderWrapper>\n                <img {...logo} alt={logo.alt} />\n                <Search />\n            </HeaderWrapper>\n        </HeaderContainer>\n    )\n}\n","import styled from \"styled-components\";\nimport { getSpacing } from \"../../constants/sizes\";\n\nexport const LinkItemWrapper = styled.li`\n    margin-bottom: ${getSpacing('l')};\n`;","import React from 'react'\nimport { LinkItemWrapper } from './styled';\n\nexport default function LinkItem({ link }) {\n    return (\n        <LinkItemWrapper key={link.id}>\n            <a href={link.url} target=\"_blank\" rel=\"noreferrer\">\n                {link.text || link.url}\n            </a>\n        </LinkItemWrapper>\n    );\n}\n","\nexport const sliceState = {\n    IDLE: 'IDLE',\n    LOADING: 'LOADING',\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { sliceState } from \"../storeConstants\";\n\nconst initialState = {\n    value: [],\n    status: sliceState.IDLE,\n};\n\nexport const linksSlice = createSlice({\n    name: 'links',\n    initialState,\n    reducers: {\n        fetchStart: (state) => {\n            state.status = sliceState.LOADING;\n        },\n        fetchEnd: (state) => {\n            state.status = sliceState.IDLE;\n        },\n        set: (state, action) => {\n            state.value = action.payload;\n        },\n        add: (state, action) => {\n            state.value = [\n                action.payload,\n                ...state.value,\n            ];\n        },\n        remove: (state, action) => {\n            state.value = state.value\n                .filter(({ id }) => id !== action.payload);\n        },\n    }\n})\n\nexport const { fetchStart, fetchEnd, set, add, remove } = linksSlice.actions;\n\nexport const selectLinks = (state) => state.links.value;\n\nexport const fetchLinks = () => (dispatch, getState) => {\n    console.log(getState());\n    dispatch(set([{\n        id: 9879,\n        url: 'none',\n    }]));\n};\n\nexport default linksSlice.reducer;\n","import styled from \"styled-components\";\nimport { getSpacing } from \"../../constants/sizes\";\n\nexport const LinkListWrapper = styled.ul`\n    list-style: none;\n    margin: ${getSpacing('xl')} 0;\n    padding: 0;\n`;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport LinkItem from '../LinkItem';\nimport { selectLinks } from '../../app/slices/links';\nimport { LinkListWrapper } from './styled';\n\nexport default function LinkList() {\n    const links = useSelector(selectLinks);\n\n    return (\n        <LinkListWrapper>\n            {links.map((link) => (\n                <LinkItem key={link.id} link={link} />\n            ))}\n        </LinkListWrapper>\n    )\n}\n","import React from 'react';\nimport Header from './components/Header';\nimport { Wrapper } from './components/layout';\nimport LinkList from './components/LinkList';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Wrapper>\n        <LinkList />\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport linksReducer from './slices/links';\n\nexport const store = configureStore({\n  reducer: {\n    links: linksReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}